import cv2
from src.detector.MotionDetector import MotionDetector
from src.detector.YoloDetector import YoloDetector

class CameraController:
    def __init__(self):
        self.cap = None
        self.motion_detector = MotionDetector()
        self.yolo_detector = YoloDetector()
        self.suspicious_behaviors = {
            "loitering": "Merodeo",
            "fighting": "Pelea",
            "stealing": "Robo",
            "intrusion": "Intrusi칩n",
            "vandalism": "Vandalismo"
        }

    def start_camera(self):
        if self.cap is None or not self.cap.isOpened():
            self.cap = cv2.VideoCapture(0)

    def stop_camera(self):
        if self.cap is not None and self.cap.isOpened():
            self.cap.release()

    def generate_frames(self):
        self.start_camera()

        while True:
            success, frame = self.cap.read()
            if not success:
                break

            # Detecci칩n con YOLO
            boxes, scores, class_ids = self.yolo_detector.detect_objects(frame)

            # Detecci칩n de movimiento
            suspicious_areas = self.motion_detector.detect_suspicious_behavior(frame)

            # Dibujar detecciones
            processed_frame = self._process_frame(frame, boxes, scores, class_ids, suspicious_areas)

            ret, buffer = cv2.imencode('.jpg', processed_frame)
            frame_bytes = buffer.tobytes()

            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    def _process_frame(self, frame, boxes, scores, class_ids, suspicious_areas):
        # Dibujar detecciones YOLO
        frame = self.yolo_detector.draw_detections(frame, boxes, scores, class_ids)

        # Dibujar 치reas sospechosas
        for (x1, y1, x2, y2) in suspicious_areas:
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)

            # Determinar comportamiento (simplificado)
            behavior = "loitering"
            label = f"Sospechoso: {self.suspicious_behaviors.get(behavior, 'Comportamiento inusual')}"

            cv2.putText(frame, label, (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

        return frame

    def __del__(self):
        self.stop_camera()